{inputs, ...}: {
  config,
  lib,
  pkgs,
  ...
}: {
  options.cow.gdi = {
    enable = lib.mkEnableOption "Cow GDI, a 'DE' by ur favorite polish cow";
    doIdle = lib.mkEnableOption "Screen locking and suspend with Hypridle";
    useUWSM = lib.mkEnableOption "Use UWSM to launch apps";
  };

  config = let
    runCmd = cmd:
      if config.cow.gdi.useUWSM
      then "uwsm app -- ${cmd}"
      else cmd;
    launchDesktopApp = deskFile:
      if config.cow.gdi.useUWSM
      then "uwsm app -- ${deskFile}"
      else "${pkgs.gtk3}/bin/gtk-launch ${deskFile}";
    screenOffCmd = "hyprctl dispatch dpms off; ${pkgs.swaynotificationcenter}/bin/swaync-client --inhibitor-add \"timeout\"";
    screenOnCmd = "hyprctl dispatch dpms on; ${pkgs.swaynotificationcenter}/bin/swaync-client --inhibitor-remove \"timeout\"";
    iconTheme = {
      name = "Tela-green";
      package = pkgs.tela-icon-theme;
    };
    cursorTheme = {
      name = "catppuccin-mocha-dark-cursors";
      package = pkgs.catppuccin-cursors.mochaDark;
      size = 24;
    };
    hyprThemeName = "${cursorTheme.name}-hypr";
    hyprCursorTheme = let
      utils = "${pkgs.hyprcursor}/bin/hyprcursor-util";
    in
      pkgs.runCommand hyprThemeName {} ''
        export PATH="$PATH:${pkgs.xcur2png}/bin"
        ${utils} -x ${cursorTheme.package}/share/icons/${cursorTheme.name} --output .
        mkdir -p $out/share/icons
        ${utils} -c ./extracted_${cursorTheme.name} --output .
        cp -r "./theme_Extracted Theme" $out/share/icons/${hyprThemeName}
      '';
  in
    lib.mkIf config.cow.gdi.enable {
      home.packages = with pkgs; [
        fira-code
        fira-go
        nerd-fonts.symbols-only
        noto-fonts-color-emoji
        unifont
        liberation_ttf

        alsa-utils

        hyprCursorTheme
        cursorTheme.package
        iconTheme.package

        wezterm

        # Shell Components
        hyprlock
        hyprland-qtutils

        ## Waybar
        qt6.qttools # For component

        pavucontrol

        wf-recorder
        slurp
        grim
        xdg-utils
        grimblast
        tesseract
        swappy
        libnotify
        swaynotificationcenter
        wl-clipboard

        hunspell
        hunspellDicts.en_US-large
      ];

      wayland.windowManager.hyprland = {
        systemd.enable = false;
        enable = true;
        extraConfig = ''
          bind = SUPER,M,submap,passthru
          submap = passthru
          bind = SUPER,ESCAPE,submap,reset
          submap = reset
        '';
        settings = {
          autogenerated = 0;
          ecosystem = {
            no_update_news = true;
            no_donation_nag = true;
          };
          cursor = {
            no_hardware_cursors = true;
            enable_hyprcursor = false;
          };
          monitor = [
            ",highres,auto,1"
          ];
          general = {
            border_size = 2;
            resize_on_border = true;
            "col.active_border" = "$red $peach $yellow $green $sapphire $lavender $mauve 225deg";
          };
          decoration = {
            rounding = 10;
          };
          input = {
            numlock_by_default = true;
            kb_options = "caps:escape";
            touchpad = {
              natural_scroll = true;
            };
          };
          xwayland = {
            force_zero_scaling = true;
          };
          # debug = {
          #   disable_logs = false;
          # };
          misc = {
            enable_swallow = true;
            disable_hyprland_logo = true;
            disable_splash_rendering = true;
            focus_on_activate = true;
            mouse_move_enables_dpms = true;
            key_press_enables_dpms = true;
          };
          env = [
            "TERMINAL,wezterm"
            "GRIMBLAST_EDITOR,swappy -f "
            "QT_QPA_PLATFORM,wayland;xcb"
            "QT_AUTO_SCREEN_SCALE_FACTOR,1"
            "HYPRCURSOR_THEME,${hyprThemeName}"
            "HYPRCURSOR_SIZE,${builtins.toJSON cursorTheme.size}"
          ];
          windowrulev2 = [
            "idleinhibit fullscreen,class:(.*),title:(.*)"
          ];
          submap = "reset";
          gesture = [
            "3,horizontal,workspace"
            "4,swipe,move"
          ];
          bind = let
            powerMenu = "rofi -modi 'p:${pkgs.rofi-power-menu}/bin/rofi-power-menu' -show p --symbols-font \"FiraMono Nerd Font Mono\"";
            screenshot = "${pkgs.nushell}/bin/nu ${../res/screenshot.nu}";

            openTerminal = launchDesktopApp "org.wezfurlong.wezterm.desktop";
            forEachWorkspace = {
              mod,
              dispatch,
            }:
              builtins.genList (
                i: let
                  num = builtins.toString i;
                in "${mod},${num},${dispatch},${
                  if num == "0"
                  then "10"
                  else num
                }"
              )
              10;
          in
            [
              "SUPER,M,submap,passthru"
            ]
            ++ lib.optionals config.cow.firefox.enable [
              "SUPER,Q,exec,${launchDesktopApp "firefox-devedition.desktop"}"
            ]
            ++ [
              "SUPER,Z,exec,systemctl suspend"
              ",XF86AudioMedia,exec,${openTerminal}"
              "SUPER,T,exec,${openTerminal}"
              "SUPER ALT CTRL SHIFT,L,exec,xdg-open https://linkedin.com"
              "SUPER,C,killactive,"
              "SUPER,P,pseudo,"
              "SUPER,R,togglefloating,"
              "SUPER,F,fullscreen,1"
              "SUPER SHIFT,F,fullscreen,0"
              ",XF86RFKill,exec,rfkill toggle wifi"
              "SUPER,left,workspace,r-1"
              "SUPER,right,workspace,r+1"
              "SUPER SHIFT,left,movetoworkspace,r-1"
              "SUPER SHIFT,right,movetoworkspace,r+1"
              "SUPER,L,exec,pidof hyprlock || hyprlock --immediate"
              "SUPER,S,exec,${runCmd "rofi -show drun -icon-theme \"candy-icons\" -show-icons"}"
              "SUPER SHIFT,E,exec,${runCmd "rofi -modi emoji -show emoji"}"
              "SUPER SHIFT,D,exec,swaync-client -d"
              "SUPER,Delete,exec,${runCmd powerMenu}"
              ",XF86PowerOff,exec,${runCmd powerMenu}"
              "SUPER ALT,C,exec,${runCmd "rofi -show calc -modi calc -no-show-match -no-sort -calc-command \"echo -n '{result}' | wl-copy\""}"
              "SUPER,B,exec,${runCmd "${pkgs.rofi-bluetooth}/bin/rofi-bluetooth"}"
              "SUPER,Tab,exec,${runCmd "rofi -show window -show-icons"}"
            ]
            ++ lib.optionals config.cow.yazi.enable ["SUPER,E,exec,${launchDesktopApp "yazi.desktop"}"]
            ++ [
              "SUPER,N,exec,${runCmd "${pkgs.swaynotificationcenter}/bin/swaync-client -t -sw"}"
              "SUPER,A,exec,${runCmd "${pkgs.pavucontrol}/bin/pavucontrol --tab 5"}"
              ''SUPER,V,exec,cliphist list | sed -r 's/\[\[ binary data (.* .iB) (.*) (.*) \]\]/ ó°‹© \2 Image (\3, \1)/g' | rofi -dmenu -display-columns 2 -p Clipboard | cliphist decode | wl-copy''
              "SUPER ALT,V,exec,echo -e \"Yes\\nNo\" | [[ $(rofi -dmenu -mesg \"Clear Clipboard History?\" -p Clear) == \"Yes\" ]] && cliphist wipe"
              ",Print,exec,${runCmd screenshot}"
              "SUPER SHIFT,S,exec,${runCmd screenshot}"
              "SUPER SHIFT,T,exec,${runCmd "${pkgs.nushell}/bin/nu ${../res/ocr.nu}"}"
              "SUPER SHIFT,C,exec,${runCmd "${pkgs.hyprpicker}/bin/hyprpicker -a"}"
            ]
            ++ forEachWorkspace {
              mod = "SUPER";
              dispatch = "workspace";
            }
            ++ forEachWorkspace {
              mod = "SUPER SHIFT";
              dispatch = "movetoworkspace";
            };
          bindr = [
            "SUPER SHIFT,R,exec,pkill wf-recorder --signal SIGINT ||${runCmd "${pkgs.nushell}/bin/nu ${../res/screenrec.nu}"}"
            "CAPS,Caps_Lock,exec,swayosd-client --caps-lock"
            ",Scroll_Lock,exec,swayosd-client --scroll-lock"
            ",Num_Lock,exec,swayosd-client --num-lock"
          ];
          bindl = [
            ",switch:on:Lid Switch,exec,${screenOffCmd}"
            ",switch:off:Lid Switch,exec,${screenOnCmd}"
            ",XF86AudioPlay,exec,playerctl play-pause"
            ",XF86AudioPause,exec,playerctl pause"
            ",XF86AudioStop,exec,playerctl stop"
            ",XF86AudioNext,exec,playerctl next"
            ",XF86AudioPrev,exec,playerctl previous"
          ];
          bindel = [
            ",XF86MonBrightnessUp,exec,swayosd-client --brightness raise"
            ",XF86MonBrightnessDown,exec,swayosd-client --brightness lower"
            ",XF86AudioRaiseVolume,exec,swayosd-client --output-volume raise"
            ",XF86AudioLowerVolume,exec,swayosd-client --output-volume lower"
            ",XF86AudioMute,exec,swayosd-client --output-volume mute-toggle"
          ];
          bindm = [
            "SUPER,mouse:272,movewindow"
            "SUPER,mouse:273,resizewindow"
          ];
        };
      };

      catppuccin.hyprlock.useDefaultConfig = false;
      programs.hyprlock = {
        enable = true;

        settings = {
          background = {
            monitor = "";
            path = "${config.cow.pictures.bg}";
            blur_passes = 1;
          };
          shape = [
            {
              monitor = "";
              color = "$crust";
              position = "0, 30";
              rounding = 10;
              border_size = 2;
              border_color = "$mauve";
              size = "500, 500";
              shadow_passes = 1;
              shadow_size = 2;
            }
            {
              monitor = "";
              color = "$crust";
              position = "0, -30";
              rounding = 10;
              border_size = 2;
              border_color = "$mauve";
              size = "600, 50";
              valign = "top";
              shadow_passes = 1;
              shadow_size = 2;
            }
          ];
          image = {
            monitor = "";
            path = "${config.cow.pictures.pfp}";
            size = 150;
            rounding = -1;
            border_size = 4;
            border_color = "$mauve";
            rotate = 0;
            position = "0, 120";
            halign = "center";
            valign = "center";
          };
          "input-field" = {
            monitor = "";
            size = "250, 50";
            outline_thickness = 2;
            dots_size = 0.25; # Scale of input-field height, 0.2 - 0.8
            dots_spacing = 0.15; # Scale of dots' absolute size, 0.0 - 1.0
            dots_center = false;
            dots_rounding = -1; # -1 default circle, -2 follow input-field rounding
            outer_color = "$surface0";
            inner_color = "$base";
            font_color = "$text";
            fade_on_empty = false;
            fade_timeout = 1000; # Milliseconds before fade_on_empty is triggered.
            placeholder_text = ''<span foreground="##cdd6f4" style="italic">Password</span>'';
            hide_input = false;
            rounding = -1; # -1 means complete rounding (circle/oval)
            check_color = "$peach";
            fail_color = "$red"; # if authentication failed, changes outer_color and fail message color
            fail_text = "<i>$FAIL <b>($ATTEMPTS)</b></i>";
            fail_transition = 300; # transition time in ms between normal outer_color and fail_color
            capslock_color = -1;
            numlock_color = -1;
            bothlock_color = -1; # when both locks are active. -1 means don't change outer color (same for above)
            invert_numlock = false; # change color if numlock is off
            swap_font_color = false; # see below

            position = "0, -80";
            halign = "center";
            valign = "center";
          };
          label = [
            {
              monitor = "";
              text = "$DESC";
              color = "$text";
              font_size = 25;
              font_family = "sans-serif";
              rotate = 0; # degrees, counter-clockwise

              position = "0, 0";
              halign = "center";
              valign = "center";
            }
            {
              monitor = "";
              text = ''cmd[update:30000] echo "  $(date +"%A, %B %-d | %I:%M %p") | $(${pkgs.nushell}/bin/nu ${../res/bat_display.nu})  "'';
              color = "$text";
              font_size = 20;
              font_family = "sans-serif";
              rotate = 0; # degrees, counter-clockwise

              position = "0, -40";
              halign = "center";
              valign = "top";
            }
          ];
        };
      };

      catppuccin.rofi.enable = false;

      systemd.user.services = let
        target = config.wayland.systemd.target;
        mkShellService = {
          desc,
          service,
        }: {
          Install = {
            WantedBy = [target];
          };

          Unit = {
            ConditionEnvironment = "WAYLAND_DISPLAY";
            Description = desc;
            After = [target];
            PartOf = [target];
          };

          Service = service;
        };
      in {
        battery-notif = mkShellService {
          desc = "Battery Notification Service";

          service = {
            ExecStart = "${pkgs.nushell}/bin/nu --plugins ${
              inputs.nu_plugin_dbus.packages.${pkgs.system}.default
            } ${../res/battery_notif.nu}";
            Restart = "on-failure";
            RestartSec = "10";
          };
        };

        mpris-idle-inhibit = mkShellService {
          desc = "MPRIS Idle Inhibitor";

          service = {
            ExecStart = ''${
                inputs.wayland-mpris-idle-inhibit.packages.${pkgs.system}.default
              }/bin/wayland-mpris-idle-inhibit --ignore "kdeconnect" --ignore "playerctld"'';
            Restart = "on-failure";
            RestartSec = "10";
          };
        };
      };

      fonts = {
        fontconfig = {
          enable = true;
          antialiasing = true;
          defaultFonts = let
            mainFonts = [
              "FiraGO"
              "Symbols Nerd Font"
            ];
          in {
            serif = mainFonts;
            sansSerif = mainFonts;
            monospace = [
              "Fira Code"
              "Symbols Nerd Font"
            ];
            emoji = [
              "Noto Color Emoji"
              "Symbols Nerd Font"
            ];
          };
        };
      };

      qt = {
        enable = true;
        platformTheme.name = "kvantum";
        style.name = "kvantum";
      };

      home.pointerCursor = {
        inherit (cursorTheme) name package size;
        enable = true;
        gtk.enable = true;
        x11.enable = true;
      };

      gtk = {
        enable = true;
        iconTheme = lib.mkForce iconTheme;
        gtk2.extraConfig = "gtk-application-prefer-dark-theme=true";
        gtk3.extraConfig.gtk-application-prefer-dark-theme = true;
        gtk4.extraConfig.gtk-application-prefer-dark-theme = true;
      };

      dconf.settings."org/gnome/desktop/interface".color-scheme = "prefer-dark";

      services = {
        hyprpolkitagent.enable = true;

        hyprpaper = {
          enable = true;
          settings = {
            ipc = "on";
            splash = false;
            preload = ["${config.cow.pictures.bg}"];
            wallpaper = [",${config.cow.pictures.bg}"];
          };
        };

        swaync = {
          enable = true;
          settings = {
            control-center-exclusive-zone = false;
            control-center-height = 1000;
            control-center-margin-bottom = 10;
            control-center-margin-left = 10;
            control-center-margin-right = 10;
            control-center-margin-top = 0;
            control-center-width = 800;
            fit-to-screen = false;
            hide-on-action = true;
            hide-on-clear = false;
            image-visibility = "when-available";
            keyboard-shortcuts = true;
            notification-body-image-height = 100;
            notification-body-image-width = 200;
            notification-icon-size = 64;
            notification-window-width = 500;
            positionX = "center";
            positionY = "top";
            script-fail-notify = true;
            scripts = {
              all = {
                exec = "${pkgs.nushell}/bin/nu ${../res/notification.nu} ${../res/notif-sounds}";
                urgency = ".*";
              };
            };
            timeout = 10;
            timeout-critical = 0;
            timeout-low = 5;
            transition-time = 200;
            widget-config = {
              dnd = {
                text = "Do Not Disturb";
              };
              label = {
                max-lines = 1;
                text = "Notification Center";
              };
              title = {
                button-text = "Clear All";
                clear-all-button = true;
                text = "Notification Center";
              };
            };
            widgets = [
              "title"
              "dnd"
              "notifications"
            ];
          };
        };

        hypridle = lib.mkIf config.cow.gdi.doIdle {
          enable = true;
          settings = {
            general = {
              lock_cmd = "pidof hyprlock || hyprlock --grace 5";
              unlock_cmd = "pkill hyprlock --signal SIGUSR1";
              before_sleep_cmd = "loginctl lock-session";
              after_sleep_cmd = screenOnCmd;
            };

            listener = let
              lockTimeout = 120;
            in [
              {
                timeout = lockTimeout; # Lock the screen after 2 minutes of inactivity
                on-timeout = "loginctl lock-session";
              }
              {
                timeout = lockTimeout + 120; # Turn off the screen 2 minutes after locking
                on-timeout = screenOffCmd;
                on-resume = screenOnCmd;
              }
              {
                timeout = lockTimeout + 600; # Suspend 10 minutes after locking
                on-timeout = "systemctl suspend";
              }
            ];
          };
        };

        cliphist = {
          enable = true;
          systemdTargets = lib.mkForce [
            config.wayland.systemd.target
          ];
        };
        udiskie = {
          enable = true;
          automount = false;
          tray = "never";
        };
        playerctld.enable = true;
        wlsunset = {
          enable = true;
          sunrise = "6:00";
          sunset = "22:00";
        };
        swayosd = {
          enable = true;
          stylePath = pkgs.writeText "swayosd-style.css" ''
            window#osd {
              border-radius: 5rem;
            }

            #container {
              padding: 5px 10px;
            }
          '';
        };
      };

      programs = {
        rofi = {
          enable = true;
          package = pkgs.rofi.override {
            plugins = with pkgs; [
              rofi-emoji
              rofi-power-menu
              rofi-bluetooth
              rofi-calc
              rofi-pulse-select
            ];
          };
          theme = let
            inherit (config.lib.formats.rasi) mkLiteral;
          in {
            "@import" = "${config.catppuccin.sources.rofi}/themes/catppuccin-${config.catppuccin.rofi.flavor}.rasi";
            "*" =
              (builtins.mapAttrs (name: value: mkLiteral "@${value}") {
                "bg0" = "base";
                "bg1" = "mantle";
                "bg2" = "crust";
                "bg3" = config.catppuccin.accent;
                "fg0" = "subtext1";
                "fg1" = "text";
                "fg2" = "subtext0";
                "fg3" = "overlay0";
                "fg4" = "surface0";
              })
              // {
                font = mkLiteral ''"Roboto 14"'';
                background-color = mkLiteral ''transparent'';
                text-color = mkLiteral ''@fg0'';
                margin = mkLiteral ''0px'';
                padding = mkLiteral ''0px'';
                spacing = mkLiteral ''0px'';
              };
            "window" = {
              location = mkLiteral ''north'';
              y-offset = mkLiteral ''calc(50% - 176px)'';
              width = mkLiteral ''600'';
              border-radius = mkLiteral ''24px'';
              background-color = mkLiteral ''@bg0'';
            };
            "mainbox" = {
              padding = mkLiteral ''12px'';
            };
            "inputbar" = {
              background-color = mkLiteral ''@bg1'';
              border-color = mkLiteral ''@bg3'';
              border = mkLiteral ''2px'';
              border-radius = mkLiteral ''16px'';
              padding = mkLiteral ''8px 16px'';
              spacing = mkLiteral ''8px'';
              children = mkLiteral ''[ prompt, entry ]'';
            };
            "prompt" = {
              text-color = mkLiteral ''@fg2'';
            };
            "entry" = {
              placeholder = mkLiteral ''"Search"'';
              placeholder-color = mkLiteral ''@fg3'';
            };
            "message" = {
              margin = mkLiteral ''12px 0 0'';
              border-radius = mkLiteral ''16px'';
              border-color = mkLiteral ''@bg2'';
              background-color = mkLiteral ''@bg2'';
            };
            "textbox" = {
              padding = mkLiteral ''8px 24px'';
            };
            "listview" = {
              background-color = mkLiteral ''transparent'';
              margin = mkLiteral ''12px 0 0'';
              lines = mkLiteral ''8'';
              columns = mkLiteral ''2'';
              fixed-height = mkLiteral ''false'';
            };
            "element" = {
              padding = mkLiteral ''8px 16px'';
              spacing = mkLiteral ''8px'';
              border-radius = mkLiteral ''16px'';
            };
            "element normal active" = {
              text-color = mkLiteral ''@bg3'';
            };
            "element alternate active" = {
              text-color = mkLiteral ''@bg3'';
            };
            "element selected normal, element selected active" = {
              text-color = mkLiteral ''@fg4'';
              background-color = mkLiteral ''@bg3'';
            };
            "element-icon" = {
              size = mkLiteral ''1em'';
              vertical-align = mkLiteral ''0.5'';
            };
            "element-text" = {
              text-color = mkLiteral ''inherit'';
            };
          };
          location = "center";
        };
        nushell.extraConfig = ''
          plugin add ${inputs.nu_plugin_dbus.packages.${pkgs.system}.default}/bin/nu_plugin_dbus
        '';

        wezterm = {
          enable = true;
          extraConfig = ''
            return {
              font = wezterm.font("monospace"),
              font_size = 18.0,
              color_scheme = "Catppuccin Mocha",
              enable_tab_bar = false,
              window_background_opacity = 0.92,
              default_cursor_style = "SteadyBar",
              cursor_thickness = 2,
              keys = {
                {key="o", mods="CTRL|SHIFT", action="OpenLinkAtMouseCursor"}
              }
            }
          '';
        };
      };
    };
}
